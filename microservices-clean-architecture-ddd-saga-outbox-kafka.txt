************************
SECCION 1 : INTRODUCCION
************************

excalidraw.com → para hacer diagramas

- Microservicios:

* Desarrollo y deploy independientes por distintos equipos
* Fácil de hacer auto-scaling
* Mejor aislamiento de fallos
* Permite el uso de distintas tecnologías para cada servicio

Se necesitan patrones y tecnologías correctos para la orquestación y el management
de las transacciones y comunicación entre servicios.

- Arquitectura Hexagonal:

* Aisla el domain logic de otras dependencias
* Usa dependency inversion
* Conocida como Ports & Adapters

- DDD

* Domain Driven Design
* Domain model con Aggregates, Entities, Value objects, Services(Domain & Application) y Events

- Kafka

* Para patrones como SAGA y CQRS


********************************************************
SECCION 2 - CLEAN ARCHITECTURE Y HEXAGONAL ARCHITECTURE
********************************************************

Crear proyecto de maven simple desde intellij

name: food-ordering-system
group-id: com.food.ordering.system

Borrar el folder /src

Editar el pom.xml:
- <relativePath/> Usar así para parents locales
- <maven-compiler-plugin.version> para la versión del compiler
- agregar el plugin del compiler


Click derecho en el project food-ordering-system -> create module
name: order-service  (CLEAN ARCHITECTURE)
eliminar /src

Click derecho en el project order-service -> create module

!Asegurarse que el parent sea order-service

order-application
order-container
order-dataaccess
order-domain
order-messaging

En todos los poms de estos módulos creados borrar <maven.compiler.source> dejar el <properties>
vacío porque ya tomará esa propiedad del pom principal

En order-domain borrar /src y crear dos modulos:
!Asegurarse que el parent sea order-domain:
order-application-service
order-domain-core   → no debe llevar dependencias porque debe ser el más independiente por tener la lógica de negocio

En todos los poms de estos módulos creados borrar <maven.compiler.source> dejar el <properties>
vacío porque ya tomará esa propiedad del pom principal


En el pom.xml principal agregar dependencias(definir los módulos para poder ser usados entre ellos) en el <dependencyManagement>

order-application
order-container (no se agregó, no es necesario)
order-dataaccess
order-domain (en lugar de este se agregaron para los submodulos)
order-messaging


En el pom.xml de:

- order-application-service agregar dependency para order-domain-core
- order-dataaccess agregar dependency para order-application-service
- order-messaging agregar dependency para order-application-service
- order-application agregar dependency para order-application-service
- order-container agregar dependency para todos los modulos(en lugar de order-domain agregar submodulos)

Ejecutar: mvn clean install

Software para diagrama automático(descargar 64 bits):
https://graphviz.org/download

Agregar ruta al path. Ejemplo: D:\Graphviz\bin

Ver comandos:
https://github.com/ferstl/depgraph-maven-plugin

Ejecutar:
mvn com.github.ferstl:depgraph-maven-plugin:aggregate -DcreateImage=true -DreduceEdges=false -Dscope=compile "-Dincludes=com.food.ordering.system*:*"

Ver en food-ordering-system/target/dependency-graph.png ... interesante!

***************************************
SECCION 3 - DOMAIN DRIVEN DESIGN (DDD)
***************************************

Click derecho en el project food-ordering-system -> create module
nombre: common
borrar /src

Crear submodulo: common-domain y borrar las properties para quedar sin maven-compiler

Agregar como dependencia el common-domain en los pom's de:

* food-ordering-system (principal)
* order-domain-core

En common-domain crear el sgte arbol de directorios dentro del package base:

/domain/entity/BaseEntity
/domain/entity/AggregateRoot

/domain/valueobject/BaseId
/domain/valueobject/OrderId
/domain/valueobject/Money
/domain/valueobject/OrderStatus
/domain/valueobject/ProductId
/domain/valueobject/RestaurantId
/domain/valueobject/CustomerId

/domain/event/DomainEvent.java

*****************************

En order-domain-core:

Crear el arbol de directorios así:

com.food.ordering.system.order.service.domain

/OrderItem (Como el constructor es privado se necesita Builder. Instalar el plugin InnerBuilder. 
                Alt+ins escoger builder, escoger todos los campos menos orderId y marcar los dos primeros checkbox.
                Reemplazar el id con error por OrderItemId)

*************************************

Agregar lógica en :
Order
OrderItem, etc

Agregar Lombok y logging en el pom principal

En el pom.xml de order-application-service agregar:
-common-domain
-validation → Para usar anotaciones como @NotNull @Max(value=10) @Valid
-spring-tx

Tuve que reducir los nombres de interfaces porque git no los aceptaba



Ejecutar:
git checkout -b publish-event-option-1


*************************
SECCION 4 - APACHE KAFKA
*************************


Kafka en docker. Se usará docker compose

En el proyecto principal crear nuevo modulo "infrastructure"
Borrar las properties del pom y el /src
Crear /docker-compose y dentro:

.env
common.yml
zookeeper.yml
kafka_cluster.yml
init_kafka.yml
/volumes/zookeeper/data
/volumes/zookeeper/transactions
/volumes/kafka/broker-1
/volumes/kafka/broker-2
/volumes/kafka/broker-3

Desde el directorio docker-compose (Se le puede dar click derecho y abrir terminal) en intellij:

docker-compose -f common.yml -f zookeeper.yml up

En el directorio del proyecto principal:
echo ruok | nc localhost 2181

docker-compose -f common.yml -f kafka_cluster.yml up (en otra consola)
docker-compose -f common.yml -f init_kafka.yml up (en otra consola)

Entrar a localhost:9000 → Add cluster

name: food-ordering-system-cluster
hosts: zookeeper:2181

Save → Go to cluster view

Ver los indicadores y status de cada componente

docker-compose -f common.yml -f zookeeper.yml down
docker-compose -f common.yml -f kafka_cluster.yml down
docker-compose -f common.yml -f init_kafka.yml down






*************************************






*************************************






*************************************








*************************************


